package com.companyname.tests;
import junit.framework.TestCase;
import org.openqa.selenium.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.lang.reflect.Field;
import java.util.concurrent.TimeUnit;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.chrome.ChromeDriver;
import org.json.JSONArray;
import org.json.JSONObject;

/*
// The source code was generated by javaSeleniumGenerator.js
// Copyright: QASYMPHONY, INC.
// Website: https://www.qasymphony.com/
// Java plugin version: 1.3.3
*/
public class TestCase1 extends TestCase {
  private WebDriver driver = null;
  private Robot robot = null;
  private Boolean isFirefoxDriver = false;
  private static final Boolean alwaysExecuteActionInLatestWindow = true;

  private static final int MOUSE_LEFT = 0;
  private static final int MOUSE_RIGHT = 2;
  private static final int PAGE_LOAD_TIMEOUT = 60;

  public void setUp() throws Exception {
		System.setProperty("webdriver.chrome.driver", "");
		driver = new ChromeDriver();

    driver.manage().timeouts().pageLoadTimeout(PAGE_LOAD_TIMEOUT, TimeUnit.SECONDS);
    robot = new Robot();
    driver.manage().window().maximize();
    driver.get("https://couponorganization.stageteamsportsadmin.com/events");
  }

  public void test() throws Exception {
		click(null, By.linkText("Learn More"), MOUSE_LEFT, 1);
		click(null, By.linkText("Need an Account?"), MOUSE_LEFT, 6);
		sendKeys(null, By.id("first_name"), "newtest", true, 4);
		sendKeys(null, By.id("last_name"), "Last Name", true, 2);
		click(null, By.id("email_address"), MOUSE_LEFT, 2);
		click(null, By.id("email_address"), MOUSE_LEFT, 2);
		click(null, By.id("email_address"), MOUSE_LEFT, 3);
		sendKeys(null, By.id("cemail_address"), "Confirm Email", true, 8);
		sendKeys(null, By.id("email_address"), "nwwtest@stageteamsportsadmin.com", true, 4);
		sendKeys(null, By.id("cemail_address"), "nwwtest@stageteamsportsadmin.com", true, 3);
		sendKeys(null, By.id("password"), "********", true, 2);
		sendKeys(null, By.id("cpassword"), "********", true, 2);
		click(null, By.id("create_account"), MOUSE_LEFT, 5);
		sendKeys(null, By.id("first_name1"), "newtest", true, 13);
		sendKeys(null, By.id("last_name1"), "player", true, 3);
		selectItemByVisibleText(null, By.id("gender1"), 3, "Select Gender" );
		click(null, By.id("dob1"), MOUSE_LEFT, 4);
		click(null, By.xpath(".//*[@id='ui-datepicker-div']/table/tbody/tr[2]/td[4]/a"), MOUSE_LEFT, 1);
		click(null, By.id("current_school1"), MOUSE_LEFT, 6);
		click(null, By.id("current_school1"), MOUSE_LEFT, 4);
		click(null, By.id("current_grade1"), MOUSE_LEFT, 1);
		sendKeys(null, By.id("email_address1"), "nwwtest@stageteamsportsadmin.com", true, 4);
		sendKeys(null, By.id("relation_ship1"), "uncle", true, 77);
		click(null, By.name("addGuardian"), MOUSE_LEFT, 3);
		selectItemByVisibleText(null, By.id("select_billing_addr"), 8, "--Select--" );
		click(null, By.id("phone_no"), MOUSE_LEFT, 7);
		sendKeys(null, By.id("phone_no"), "9987458965", true, 1);
		click(null, By.id("cellphone_no"), MOUSE_LEFT, 4);
		sendKeys(null, By.id("cellphone_no"), "Alternate Phone Number", true, 1);
		click(null, By.id("name_on_card"), MOUSE_LEFT, 1);
		selectItemByVisibleText(null, By.id("card_type"), 4, "Select Card Type" );
		click(null, By.xpath(".//*[@id='user_payment']/div[4]/div[5]/label"), MOUSE_LEFT, 13);
		click(null, By.id("card_number"), MOUSE_LEFT, 1);
		click(null, By.xpath(".//*[@id='user_payment']/div[4]/div[6]/div[1]"), MOUSE_LEFT, 2);
		sendKeys(null, By.id("expiration_month"), "02", true, 1);
		sendKeys(null, By.id("expiration_year"), "2025", true, 2);
		sendKeys(null, By.id("cvv_code"), "********", true, 1);
		click(null, By.name("payment"), MOUSE_LEFT, 3);
		click(null, By.id("test"), MOUSE_LEFT, 17);
		click(null, By.xpath(".//*[@id='header-c']/div[2]/ul/li[3]/a"), MOUSE_LEFT, 2);
		click(null, By.id("updateBillingInfo"), MOUSE_LEFT, 5);
		click(null, By.xpath(".//*[@id='updateBillingInfoFrm']/div/div[17]/div[3]/label"), MOUSE_LEFT, 4);
		click(null, By.xpath(".//*[@id='updateBillingInfoFrm']/div/div[17]/div[6]/label"), MOUSE_LEFT, 2);
		click(null, By.id("card_number"), MOUSE_LEFT, 1);
		selectItemByVisibleText(null, By.id("card_type"), 1, "Visa" );
		click(null, By.id("card_number"), MOUSE_LEFT, 1);
  }

  public void tearDown() {
    driver.quit();
  }

  public void click(String frames, By locator, int mouseButton, int timeoutInSeconds) throws Exception {
    click(frames, locator, mouseButton, null, timeoutInSeconds);
  }

  /*
   * try to click on an element, retry until the timeout is reached
   * */  
  public void click(String frames, By locator, int mouseButton, String combinedControlKeys, int timeoutInSeconds) throws Exception {
    if (alwaysExecuteActionInLatestWindow) switchToLastWindow(frames);
    Boolean success = false;
    long timeoutInMillies = timeoutInSeconds * 1000;
    WebElement elm = null;
    // indicate whether the element is an <option> tag on Firefox browser
    Boolean isOptionTagOnFireFox = false;
    // time spent counters
    long timeSpentInMillis = 0;
    // try to click on the element until wait timout reached
    while ((success == false) && (timeSpentInMillis <= timeoutInMillies)) {
      long startFinding = System.currentTimeMillis();
      try {
        // find the element and calculate time spent
        elm = findElement(locator, 1);
        timeSpentInMillis += System.currentTimeMillis() - startFinding;

        if (elm != null) {
          // get tag name of the element
          String tag = elm.getTagName();
          // check whether the element is <option> tag on Firefox browser
          isOptionTagOnFireFox = isFirefoxDriver && (0 == elm.getTagName().compareToIgnoreCase("option"));
          
          // press control keys (Ctrl, Alt, Shift, Meta), if any
          pressControlKeys(combinedControlKeys);
          if (mouseButton == MOUSE_LEFT) {
            // click on the element
            elm.click();  
          }
          else if (mouseButton == MOUSE_RIGHT) {
            Actions action = new Actions(driver);
            action.contextClick(elm);
            action.build().perform();
          }
          // release control keys (Ctrl, Alt, Shift, Meta)
          releaseControlKeys(combinedControlKeys);
          // successfully clicked on element, turn on the flag to escape the loop
          success = true;
        }
      } catch (Exception e) { 
        releaseControlKeys(combinedControlKeys);
        timeSpentInMillis += System.currentTimeMillis() - startFinding;
        // probably the element is not present yet or it is non-clickable
        System.out.println(e.getMessage());
        // if element is found and we reached to the timeout, try to click on it with JavaScript
        if ((elm != null) && (timeSpentInMillis > timeoutInMillies)) {
          // press control keys (Ctrl, Alt, Shift, Meta), if any
          pressControlKeys(combinedControlKeys);
          JavascriptExecutor js = (JavascriptExecutor) this.driver;
          js.executeScript("arguments[0].click();", elm);
          releaseControlKeys(combinedControlKeys);
          // successfully clicked on element, turn on the flag to escape the loop
          success = true;
        }
      }
    }

    if (success) {
      // if element is <option> tag on Firefox browser,
      // perform a workaround to support MOUSE_LEFT
      if (isOptionTagOnFireFox)
      {
        robot.keyPress(KeyEvent.VK_ENTER);
        robot.delay(300);
        robot.keyRelease(KeyEvent.VK_ENTER);
      }
    }
    else { // failed
      if (elm == null) {
          throw new NoSuchElementException("Element not found.");
      } else {
          throw new Exception("Failed to click on the element");
      }
    }
  }

  public void sendKeys(String frames, By locator, String keys, boolean clearTextBeforeSendingKeys, int timeoutInSeconds) throws Exception {
    if (alwaysExecuteActionInLatestWindow) switchToLastWindow(frames);
    WebElement elm = findElement(locator, timeoutInSeconds);
    if (clearTextBeforeSendingKeys) elm.clear();
    elm.sendKeys(keys);
  }

  public void sendSpecialKey(String frames, By locator, Keys specialKey, int timeoutInSeconds) throws Exception {
    sendSpecialKey(frames, locator, specialKey, null, timeoutInSeconds);
  }

  public void sendSpecialKey(String frames, By locator, Keys specialKey, String combinedControlKeys, int timeoutInSeconds) throws Exception {
    if (alwaysExecuteActionInLatestWindow) switchToLastWindow(frames);
    WebElement elm = findElement(locator, timeoutInSeconds);
    String key = Keys.chord(specialKey);

    if (null != combinedControlKeys) {
      if (combinedControlKeys.contains("Shift"))
        key = Keys.chord(Keys.SHIFT, key);
      if (combinedControlKeys.contains("Alt"))
        key = Keys.chord(Keys.ALT, key);
      if (combinedControlKeys.contains("Ctrl"))
        key = Keys.chord(Keys.CONTROL, key);
      if (combinedControlKeys.contains("Meta"))
        key = Keys.chord(Keys.META, key);
    }

    if (0 < key.length())
      elm.sendKeys(key);
  }

  private void sendKeyWithoutTarget(int keyCode) {
    sendKeyWithoutTarget(keyCode, null);
  }

  private void sendKeyWithoutTarget(int keyCode, String combinedControlKeys) {
    pressControlKeys(combinedControlKeys);
    robot.keyPress(keyCode);
    robot.delay(300);
    robot.keyRelease(keyCode);
    releaseControlKeys(combinedControlKeys);
  }

  private WebElement findElement(By locator, int waitForElementTimeoutInSeconds) throws InterruptedException {
    while(true) {
      try {
        WebDriverWait wait = new WebDriverWait(driver, waitForElementTimeoutInSeconds);
        return wait.until(ExpectedConditions.elementToBeClickable(locator)); //element is displayed and enabled.
      } catch (TimeoutException timeoutException) {
        // sometimes WebDriverWait falied to find elements, e.g. Dojo checkboxs, and we need to fall back to use WebDriver itself
        return driver.findElement(locator);
      } catch (UnhandledAlertException alertException) {
        // Alert dialog is about to be closed, wait a moment and retry
        Thread.sleep(500);
      }
    }     
  }
private void switchToFrames(String jsonFrames) throws Exception{
  driver.switchTo().defaultContent();
  JSONArray array = new JSONArray(jsonFrames);
  int len = array.length();
  for (int index = 0; index < len; index++) {
    JSONObject obj = array.getJSONObject(index);
    String type = obj.getString("type");
    String value = obj.getString("value");
    // switch to desired frame/iframe
    if (0 == type.compareToIgnoreCase("index")) {
      driver.switchTo().frame(Integer.parseInt(value));
    } else {
      driver.switchTo().frame(value);
    }
  }
}

  private void performActionDialog(Boolean accept, String data) {
    try {
      // wait 2 seconds to ensure the alert is available
      WebDriverWait wait = new WebDriverWait(driver, 2);
      wait.until(ExpectedConditions.alertIsPresent());
      Alert alert = driver.switchTo().alert();
      if (accept) {
        if (null != data) {
          alert.sendKeys(data);
        }
        alert.accept();
      }
      else {
        alert.dismiss();
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  private void pressControlKeys(String keysCombination) {
    if (null == keysCombination)
      return;
    if (keysCombination.contains("Ctrl"))
      robot.keyPress(KeyEvent.VK_CONTROL);
    if (keysCombination.contains("Alt"))
      robot.keyPress(KeyEvent.VK_ALT);
    if (keysCombination.contains("Shift"))
      robot.keyPress(KeyEvent.VK_SHIFT);
    if (keysCombination.contains("Meta"))
      robot.keyPress(KeyEvent.VK_META);
  }

  private void releaseControlKeys(String keysCombination) {
    if (null == keysCombination)
      return;
    if (keysCombination.contains("Ctrl"))
      robot.keyRelease(KeyEvent.VK_CONTROL);
    if (keysCombination.contains("Alt"))
      robot.keyRelease(KeyEvent.VK_ALT);
    if (keysCombination.contains("Shift"))
      robot.keyRelease(KeyEvent.VK_SHIFT);
    if (keysCombination.contains("Meta"))
      robot.keyRelease(KeyEvent.VK_META);
  }
  public void selectItemByVisibleText(String frames, By selectElementLocator, int waitForElementTimeout,  String text) throws Exception {
    if (alwaysExecuteActionInLatestWindow) switchToLastWindow(frames);
    Select sel = new Select(findElement(selectElementLocator, waitForElementTimeout));
    sel.selectByVisibleText(text);
  }
  private void switchToLastWindow(String activeFrame) throws Exception{
    Object[] handles = driver.getWindowHandles().toArray(); 
    driver.switchTo().window((String)handles[handles.length - 1]); 
    if (null != activeFrame) switchToFrames(activeFrame);
  }
}
